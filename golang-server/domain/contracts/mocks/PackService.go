// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	entity "github.com/JackDaniells/pack-service/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// PackService is an autogenerated mock type for the PackService type
type PackService struct {
	mock.Mock
}

// Addlist provides a mock function with given fields: packs
func (_m *PackService) Addlist(packs []int) error {
	ret := _m.Called(packs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(packs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Calculate provides a mock function with given fields: orderItems
func (_m *PackService) Calculate(orderItems int) ([]entity.Pack, error) {
	ret := _m.Called(orderItems)

	var r0 []entity.Pack
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]entity.Pack, error)); ok {
		return rf(orderItems)
	}
	if rf, ok := ret.Get(0).(func(int) []entity.Pack); ok {
		r0 = rf(orderItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pack)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(orderItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: pack
func (_m *PackService) Create(pack int) error {
	ret := _m.Called(pack)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pack)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *PackService) GetAll() ([]entity.Pack, error) {
	ret := _m.Called()

	var r0 []entity.Pack
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Pack, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Pack); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Pack)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: pack
func (_m *PackService) Remove(pack int) error {
	ret := _m.Called(pack)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(pack)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveList provides a mock function with given fields: packs
func (_m *PackService) RemoveList(packs []int) error {
	ret := _m.Called(packs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(packs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateList provides a mock function with given fields: packs
func (_m *PackService) UpdateList(packs []int) error {
	ret := _m.Called(packs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(packs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPackService creates a new instance of PackService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackService(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackService {
	mock := &PackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
